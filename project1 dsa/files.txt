DATA STRUCTURES AND ALGORITHMS
(CSX-219)

                            LAB PRACTICALS RECORD


                            COMPUTER SCIENCE AND ENGINEERING
                   

                                          

                         DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING
Dr. B R AMBEDKAR NATIONAL INSTITUTE OF TECHNOLOGY
JALANDHAR – 144011, PUNJAB (INDIA)
June-December, 2014




	Submitted To:							Submitted By:
     Mr. Ashish Kumar                                                                                Your Name  :                         GITESH GOYAL
           Asst. Professor                                                                              		    Roll No :            	                                  
           Dept. of CSE                                                                                         13103006
		  3rd semester




INDEX
S. No.
OBJECTIVE
Page No.
Sign
1. 
         PROGRAM TO FIND MODE 


2. 
     PROGRAM TO FIND MAX OF SUBARRAY                                        


3. 
PROGRAM TO PERFORM BASIC OPERATIONS ON LINKLIST


4. 
PROGRAM TO PERFORM DELETION OPERATION ON LINKLIST


5. 
PROGRAM TO FIND LOOP IN LINKLIST


6. 
  PROGRAM TO REVERSE A LINKLIST


7. 
PROGRAM TO DO BASIC OPERATIONS (PUSH POP ) ON STACK



8. 
PROGRAM TO CONVERT INFIX TO PREFIX



9. 
PROGRAM TO CONVERT INFIX TO POSTFIX


10. 
 PROGRAM TO DO BASIC OPERATION ON QUEUE 



11. 
   BINARY SEARCH PROGRAM


12. 
 BUBBLE SORTING


13. 
INSERTION SORT


14. 
SELECTION SORT


15. 
QUICK SORT


16. 
INORDER TRAVERSAL OF BINARY TREE


17. 
POSTORDER TRAVERSAL OF BINARY TREE


18. 
PREORDER TRAVERSAL OF BINARY TREE


19. 
TOWER OF HANOI


20. 



21. 



22. 



23. 



24. 








Programming Environment: 

Operating System: Ubuntu 14.04 (Linux)
Compiler: GCC 4.8

Editor: Gedit/Vi
Programming Language: C


1.
Objective: To search an element in the array using Linear Search.

Program:
#include<stdio.h>
#include<conio.h>
void main()
{
	int a[10],i,item,flag=0;
	clrscr();
	printf("Enter the data in the array: ");
	for(i=0;i<10;i++)
	{
		scanf("%d",&a[i]);
a	}
	printf("\nEnter the element to be searched: ");
	scanf("%d",&item);
	for(i=0;i<10;i++)
	{
		if(item==a[i])
		{
			flag=1;
			break;
		}
	}
	if(flag==0)
		printf("\nElement Not Found\n");
	else
		printf("\nElement Found at Position =%d\n",i+1);
	getch();
}


Output: 
Enter the data in the array: 1 9 5 8 0 15 10 3 4 6
Case 1:
Enter the element to be searched:  10
Element Found at Position=7
Case 2:
Enter the element to be searched: 20
Element Not Found









1.                           PROGRAM TO FIND MODE    


#include<stdio.h> 
void main() 
{ 
int arr[30],freq[30],k=0,l,n; 
int i,j,num=0; 
printf("ENTER NO of elements "); 
scanf("%d",&n); 
for(i=0;i<n;i++) 
{ 
scanf("%d",&arr[i]); 
} 
for(j=0;j<n;j++) 
{ num=0; 
for(i=j;i<n;i++) 
{ 
if(arr[i]==arr[j]) 
num++; 
} 
freq[j]=num; 

} 

num=arr[0]; 

for(i=1;i<n;i++) 
{ 
if(num<freq[i]) 
num=freq[i]; 
} 

for(i=0;i<n;i++) 
{ 
if(num==freq[i]) 
{ 
k++; 
l=i; 
} 
} 
if(k==1) 
printf("\n MODE IS %d\n",arr[l]); 
else 
printf("doesnot exist"); 
}
                                 OUTPUT:
                           ENTER NO of elements 6 
                          1 2 3 2 4 2 5 
                           MODE IS 2            
                                               
                                                                                                                                                                                           2.		PROGRAM TO FIND MAX OF SUBARRAY                                        

 #include<stdio.h> 
void main() 
{ 
int arr[30],n; 
int sum=0,i,j,k; 
int max=arr[0]; 
printf("ENTER NO of elements "); 
scanf("%d",&n); 
for(i=0;i<n;i++) 
{ 
scanf("%d",&arr[i]); 
} 

for(k=0;k<n;k++) 
{ 
for(i=0;i<n;i++) 
{ 
for(j=i;j<=k;j++) 
{ 
sum=sum+arr[j]; 
} 
if(max<sum) 
max=sum; 
sum=0; 
} 

} 
printf("%d\n",max); 


for(i=0;i<n;i++) 
{ 
for(k=0;k<n;k++) 
{ 
for(j=k;j<=i;j++) 
{ 
sum=sum+arr[j]; 

} 

if(sum==max) 
break; 
sum=0; 
} 
if(sum==max) 
break; 
sum=0; 
} i++;
i=i-k;
printf("\n array of length %d   starting from %d\n",i,++k); }
                   OUTPUT:
  
 ENTER NO of elements 6   
2 3 -5 6 -7 1 
6 
 array of length 4   starting from 1 














































3.		PROGRAM TO PERFORM BASIC OPERATIONS ON LINKLIST

#include<stdio.h> 

struct link 
{ 
int item; 
struct link* node; 
}; 
// CREATING A NODE 
 struct link* createnode() 
{ 
struct link* temp; 
temp= (struct link*)malloc(sizeof(struct link)); 
return temp; 
} 

void put(struct link* temp) 
{ 
int i; 
printf("ENTER THE VALUE\n"); 
scanf("%d",&i); 
temp->item=i; 


} 
 void display(struct link *temp) 
{ 
while(temp->node!=NULL) 
{ 
printf("%d ",temp->item); 
temp=temp->node; 
} 
} 
void main() 
{ 
int z=1,j,i,k,n=0; 
 struct link* start,*next,*prev,*temp,*last; 
start=createnode(); 
printf("for start node:"); 
put(start); 
while(z==1) 
{ 
printf("Enter the choice \n 1 for INSERTING AT FIRST POSITION \n 2 forINSERTION AT LAST POSITION \n 3 for INSERTION ON Ith POSITION FROM BEGINNING \n 4 for INSERTION ON Ith POSITION FROM LAST \n 5 for DISPLAY"); 
scanf("%d",&k); 
switch(k) 
{ 
case 1: 
// INSERTING AT FIRST POSITION 
next=createnode(); 
next->node=start; 
start=next; 
printf("ENTER THE VALUE\n"); 
scanf("%d",&k); 

start->item=k; 

break; 
case 2: 
//INSERTION AT LAST POSITION 
 
 next=createnode(); 
temp=start; 
while(temp->node!=NULL) 
{ 
temp=temp->node; 
} 
temp->node=next; 
printf("ENTER THE VALUE\n"); 
scanf("%d",&k); 

next->item=k; 

prev=next; 
next=createnode(); 
prev->node=next; 
break; 
case 3: 
n=0; 
//INSERTION ON Ith POSITION FROM BEGINNING 
printf("\n\nENTER THE POSITION "); 
scanf("%d",&i); 
temp=start; 
while(temp!=NULL) 
{ 
n++; 
temp=temp->node; 

} 
if((n+1)<i) 
printf("try again"); 
else 
{ 
temp=start; 
for(j=2;j<i;j++) 
{ 
temp=temp->node; 
} 
next=createnode(); 
next->node=temp->node; 
temp->node=next; 
printf("ENTER THE VALUE\n"); 
scanf("%d",&k); 

next->item=k; 
} 
break; 
case 4: 
//insertion on ith position from last 
 printf("\n\nENTER THE POSITION "); 
scanf("%d",&i); 
last=start; 
while(temp!=NULL) 
{ 
n++; 
temp=temp->node; 

} 
if((n+1)<i) 
printf("try again"); 
else 
{ 
last=start; 
for(j=0;j<i;j++) 
{ 
last=last->node; 
} 
temp=start; 

while(last->node!=NULL) 
{ 
last=last->node; 
temp=temp->node; 
} 
next=createnode(); 
next->node=temp->node; 
temp->node=next; 
printf("ENTER THE VALUE\n"); 
scanf("%d",&k); 

next->item=k; 
break; 
} 
case 5: 
display(start); 
break; 

default: 
printf("ERROR"); 

} 
printf("WANT TO CONTINUE 1 FOR YES 0 FOR NO"); 
scanf("%d",&z); 
} }
                                     OUTPUT:

for start node:ENTER THE VALUE 
1 
Enter the choice 
 1 for INSERTING AT FIRST POSITION 
 2 forINSERTION AT LAST POSITION 
 3 for INSERTION ON Ith POSITION FROM BEGINNING 
 4 for INSERTION ON Ith POSITION FROM LAST 
 5 for DISPLAY1 
ENTER THE VALUE 
2 
WANT TO CONTINUE 1 FOR YES 0 FOR NO1 
Enter the choice 
 1 for INSERTING AT FIRST POSITION 
 2 forINSERTION AT LAST POSITION 
 3 for INSERTION ON Ith POSITION FROM BEGINNING 
 4 for INSERTION ON Ith POSITION FROM LAST 
 5 for DISPLAY2 
ENTER THE VALUE 
3 
WANT TO CONTINUE 1 FOR YES 0 FOR NO1 
Enter the choice 
 1 for INSERTING AT FIRST POSITION 
 2 forINSERTION AT LAST POSITION 
 3 for INSERTION ON Ith POSITION FROM BEGINNING 
 4 for INSERTION ON Ith POSITION FROM LAST 
 5 for DISPLAY3 
ENTER THE POSITION 2 
ENTER THE VALUE 
4 
WANT TO CONTINUE 1 FOR YES 0 FOR NO1 
Enter the choice 
 1 for INSERTING AT FIRST POSITION 
 2 forINSERTION AT LAST POSITION 
 3 for INSERTION ON Ith POSITION FROM BEGINNING 
 4 for INSERTION ON Ith POSITION FROM LAST 
 5 for DISPLAY4

ENTER THE POSITION 2 
ENTER THE VALUE 
5 
WANT TO CONTINUE 1 FOR YES 0 FOR NO1 
Enter the choice 
 1 for INSERTING AT FIRST POSITION 
 2 forINSERTION AT LAST POSITION 
 3 for INSERTION ON Ith POSITION FROM BEGINNING 
 4 for INSERTION ON Ith POSITION FROM LAST 
 5 for DISPLAY5 
2 4 1 5 3
4.   PROGRAM TO PERFORM DELETION OPERATION ON LINKLIST

#include<stdio.h> 
#include<stdlib.h> 
struct node 
{ 
    int info; 
    struct node * next; 
}; 

struct node * start; 

void getnode(int x) 
{ 
    
    
    struct node * temp,*prev; 
    
    temp=(struct node *)malloc(sizeof(struct node)); 
    temp->info=x; 
    temp->next=NULL; 
    
    if(start==NULL) 
    { 
        start=temp; 
        return; 
    } 
    prev=start; 
    
    while(prev->next!=NULL) 
    { 
        prev=prev->next; 
    } 
    prev->next=temp; 
    
} 

void display() 
{ 
    struct node * move; 
    move=start; 
    printf("The Linked List:"); 
    while(move!=NULL) 
    { 
        printf("%d",move->info); 
        move=move->next; 
    } 
} 

void delete(int x) 
{ 
    
    struct node * present,*prev = NULL; 
    present=start; 
    
    while(present->info!=x) 
    { 
        prev=present; 
        present=present->next; 
    } 
    prev->next=present->next; 
    free(present); 
} 
void main() 
{ 
    
    int choice,num,z=1; 
    
    while(z==1) 
    { 
        
        printf("Enter your choice:\n1 to ADD NODE 2 for DELETION\n3 for DISPLAY\n"); 
        scanf("%d",&choice); 
        switch(choice) 
        { 
                
            case 1: 
                printf("Enter the number you want to insert\n"); 
                scanf("%d",&num); 
                getnode(num); 
                break; 
                
            case 2: 
                printf("Enter the element you want to delete"); 
                scanf("%d",&num); 
                delete(num); 
                break; 
                
            case 3: 
                display(); 
                break; 
                
            case 4: 
                printf("error"); 
                
                
        } 
printf("WANT TO CONTINUE 1 FOR YES 0 FOR NO"); 
scanf("%d",&z); 

    } 
    
}  
                          OUTPUT:
 Enter your choice: 
1 to ADD NODE 2 for DELETION 
3 for DISPLAY 
1 
Enter the number you want to insert 
1 
WANT TO CONTINUE 1 FOR YES 0 FOR NO1 
Enter your choice: 
1 to ADD NODE 2 for DELETION 
3 for DISPLAY 
1 
Enter the number you want to insert 
2 
WANT TO CONTINUE 1 FOR YES 0 FOR NO1 
Enter your choice: 
1 to ADD NODE 2 for DELETION 
3 for DISPLAY 
1 
Enter the number you want to insert 
3 
WANT TO CONTINUE 1 FOR YES 0 FOR NO1 
Enter your choice: 
1 to ADD NODE 2 for DELETION 
3 for DISPLAY 
1 
Enter the number you want to insert 
4 
WANT TO CONTINUE 1 FOR YES 0 FOR NO1 
Enter your choice: 
1 to ADD NODE 2 for DELETION 
3 for DISPLAY 
2 
Enter the element you want to delete2 
WANT TO CONTINUE 1 FOR YES 0 FOR NO1 
Enter your choice: 
1 to ADD NODE 2 for DELETION 
3 for DISPLAY 
3 
The Linked List:134













5.    PROGRAM TO FIND LOOP IN LINKLIST

#include<stdio.h> 
int i=1; 
struct link 
{ 
int item; 
struct link* node; 
}; 
// CREATING A NODE 
 struct link* createnode() 
{ 
struct link* temp; 
temp= (struct link*)malloc(sizeof(struct link)); 
return temp; 
} 

void put(struct link* temp) 
{ 
temp->item=i; 
printf("%d\n",temp->item); 
i++; 
} 
 void display(struct link *temp) 
{ 
while(temp->node!=NULL) 
{ 
printf("%d\n",temp->item); 
temp=temp->node; 
} 
printf("%d\n",temp->item); 
} 

void main() 
{ 

int k,j,i; 
 struct link* start,*next,*prev,*temp,*last; 
start=createnode(); 

put(start); 
next=createnode(); 
start->node=next; 
put(next); 
for(j=1;j<9;j++) 
{ 
prev=next; 
next=createnode(); 
prev->node=next; 
put(next); 

} 
temp=start; 
for(i=1;i<5;i++) 
{ 
temp=temp->node; 
} 

next->node=temp; 
temp=start; 
last=start; 
do 
{ 
if(temp->node!=NULL) 
{ 
temp=temp->node->node->node; 
last=last->node; 
} 
else 
break; 
}while(temp!=last); 
if(temp==last) 
{ 
printf("loop exist"); 
k=1; 
} 
else 
printf("not "); 
if(k==1) 
{ 
last=start; 
while(temp!=last) 
{ 
temp=temp->node; 
last=last->node; 
} 
printf("\n%d\n",last->item); 
} }   

 OUTPUT:
   
1 
2 
3 
4 
5 
6 
7 
8 
9 
10 
loop exist 
5 

 6.      PROGRAM TO REVERSE A LINKLIST

#include<stdio.h> 
int i=1; 
struct link 
{ 
int item; 
struct link* node; 
}; 
// CREATING A NODE 
 struct link* createnode() 
{ 
struct link* temp; 
temp= (struct link*)malloc(sizeof(struct link)); 
return temp; 
} 

void put(struct link* temp) 
{ 
int i ; 
printf("ENTER THE VALUE"); 
scanf("%d",&i); 
temp->item=i; 


} 
 void display(struct link *temp) 
{ 
while(temp!=NULL) 
{ 
printf("%d\n",temp->item); 
temp=temp->node; 
} 

} 
void main() 
{ 
int j,i,choice,z=1; 
 struct link* start,*next,*prev,*temp,*p,*r,*q; 
start=createnode(); 
printf("for start node:"); 
put(start); 
next=start; 
 while(z==1) 
    { 
        
        printf("Enter your choice:\n1 to ADD NODE\n 2 for REVERSING THE LIST \n3 for DISPLAY\n"); 
        scanf("%d",&choice); 
        switch(choice) 
        { 
                
            case 1: 
             prev=next; 
         next=createnode(); 
         prev->node=next; 
          put(next); 
                break; 
                
            case 2: 
                p = start, 
                q = NULL, 
                r; 
    while (p != NULL) 
    { 
        r = q; 
        q = p; 
        p = p->node; 
        q->node = r; 
    } 
    start=q; 
printf("REVERSED\n"); 
                break; 
                
            case 3: 
                display(start); 
                break; 
                
            case 4: 
                printf("error");                
                
        } 
printf("WANT TO CONTINUE 1 FOR YES 0 FOR NO"); 
scanf("%d",&z); 
 
   } 

} 


                   OUTPUT:

for start node:ENTER THE VALUE  
1 
Enter your choice: 
1 to ADD NODE 
 2 for REVERSING THE LIST 
3 for DISPLAY 
1 
ENTER THE VALUE2 
WANT TO CONTINUE 1 FOR YES 0 FOR NO1 
Enter your choice: 
1 to ADD NODE 
 2 for REVERSING THE LIST 
3 for DISPLAY 
1 
ENTER THE VALUE3 
WANT TO CONTINUE 1 FOR YES 0 FOR NO1 
Enter your choice: 
1 to ADD NODE 
 2 for REVERSING THE LIST 
3 for DISPLAY 
1 
ENTER THE VALUE4 
WANT TO CONTINUE 1 FOR YES 0 FOR NO1 
Enter your choice: 
1 to ADD NODE 
 2 for REVERSING THE LIST 
3 for DISPLAY 
2 
REVERSED 
WANT TO CONTINUE 1 FOR YES 0 FOR NO1 
Enter your choice: 
1 to ADD NODE 
 2 for REVERSING THE LIST 
3 for DISPLAY 3

4 
3 
2 
1 


























7.    PROGRAM TO DO BASIC OPERATIONS (PUSH POP ) ON STACK

#include <stdio.h> 
#include<stdlib.h> 

int stack[10]; 
int top=-1; 

void push(int x) 
{ 
    if(top==9) 
        printf("\nStack is Full"); 
    else 
    { 
        
        top++; 
        stack[top]=x; 
    } 
    
    
} 

void pop() 
{ 
    int x; 
    
    if(top==-1) 
        printf("\nStack is Empty"); 
    
    else 
    { 
        x=stack[top]; 
        top--; 
    } 
} 


int main() 
{ 
    
    int choice,num; 
    int i,z=1; 
    while(z==1) 
    { 
       
            printf("Enter 1 to push an element\nEnter 2 to pop an element\nEnter 3 to display the elemnts of the stack"); 
            scanf("%d",&choice); 
        
    
    switch(choice) 
    { 
        case 1: 
            printf("\nEnter the number you want to push:"); 
            scanf("%d",&num); 
            push(num); 
            break; 
            
        case 2: 
            
            pop(); 
            break; 
            
        case 3: 
            printf("\nElements in stack are:"); 
            for(i=0;i<=top;i++) 
                printf("%d\n",stack[i]); 
            break; 
            
        default: 
            printf("\nERROR"); 
            
    } 
        
        
    printf("PRESS 1 for coninue 0 for exit"); 
scanf("%d",&z); 
    } 
    return 0; 
    
   
} 

                OUTPUT:
    
Enter 1 to push an element 
Enter 2 to pop an element 
Enter 3 to display the elemnts of the stack1 

Enter the number you want to push:1 
PRESS 1 for coninue 0 for exit1 
Enter 1 to push an element 
Enter 2 to pop an element 
Enter 3 to display the elemnts of the stack1 

Enter the number you want to push:2 
PRESS 1 for coninue 0 for exit1 
Enter 1 to push an element 
Enter 2 to pop an element 
Enter 3 to display the elemnts of the stack1 

Enter the number you want to push:3 
PRESS 1 for coninue 0 for exit1 
Enter 1 to push an element 
Enter 2 to pop an element 
Enter 3 to display the elemnts of the stack2 
PRESS 1 for coninue 0 for exit1 
Enter 1 to push an element 
Enter 2 to pop an element 
Enter 3 to display the elemnts of the stack3 

Elements in stack are:1 
2 











































8.    PROGRAM TO CONVERT INFIX TO PREFIX

#include<stdio.h> 
#include<string.h> 
char stack[20]; 

int top=-1; 

void push(char item) 

{ 

top++; 

stack[top]=item; 

} 

char pop() 

{ 

char a; 

a=stack[top]; 

top--; 

return a; 

} 



int prcd(char symbol) 

{ 

switch(symbol) 

{ 

case '+':return 2; 
break; 

case '-':return 2; 

break; 

case '*':return 4; 
break; 
 
case '/':return 4; 

break; 

case '^':return 6;  
break; 

case '(':return 1; 
break; 
case ')':return 1; 
break; 


} 

} 

int isoperator(char symbol) 

{ 

switch(symbol) 

{ 

case '+': return 1; 

break; 

case '-': return 1; 

break; 

case '*': return 1; 

break; 

case '/': return 1; 

break; 

case '^':return 1; 

break; 

case '(': return 1; 

break; 

case ')':return 1; 

break; 

default:return 0; 

} 

} 

void convertip(char infix[],char prefix[]) 

{ 

int i,symbol,j=0; 

//infix=strrev(infix); 

for(i=strlen(infix)-1;i>-1;i--) 

{ 

symbol=infix[i]; 

if(isoperator(symbol)==0) 

{ 

prefix[j]=symbol; 

j++; 

} 

else{ 

if(symbol=='(')push(symbol); 

else if(symbol==')') 

{ 

while(stack[top]!='(') 

{ 

prefix[j]=pop(); 

j++; 

} 

pop(); 

} 

else{ 

if(prcd(symbol)>prcd(stack[top])) 

push(symbol); 

else{ 

while(prcd(symbol)<=prcd(stack[top])) 

{ 

prefix[j]=pop(); 

j++; 

} 

push(symbol); 

} 

} 

} 

} 

while(top!=-1) 

{ 

prefix[j]=pop(); 

j++; 

} 

prefix[j]='\0'; 

} 

void main() 

{ 
int i,j; 
char temp,infix[20],prefix[20]; 


printf("Enter the valid infix string:\n"); 
 
scanf("%s",&infix[0]); 


convertip(infix,prefix); 

printf("The corresponding prefix string is:\n"); 

for(i=0,j=strlen(prefix)-1;i<=(strlen(prefix)/2);i++,j--) 
{ 
temp=prefix[i]; 
prefix[i]=prefix[j]; 
prefix[j]=temp; 
} 
printf("%s",prefix); 

 

} 



 			OUTPUT:
  		
		Enter the valid infix string: 
	          a+b*c-d/e 
	         The corresponding prefix string is: 
	         +a-*bc/de


























9.   PROGRAM TO CONVERT INFIX TO POSTFIX

#include<stdio.h> 
#include<string.h> 
char stack[20]; 

int top=-1; 

void push(char item) 

{ 

top++; 

stack[top]=item; 

} 

char pop() 

{ 

char a; 

a=stack[top]; 

top--; 

return a; 

} 



int prcd(char symbol) 

{ 

switch(symbol) 

{ 

case '+':return 2; 
break; 

case '-':return 2; 

break; 

case '*':return 4; 
break; 

case '/':return 4; 

break; 

case '^':return 6;  
break; 

case '(':return 1; 
break; 
case ')':return 1; 
break; 


} 

} 

int isoperator(char symbol) 

{ 

switch(symbol) 

{ 

case '+': return 1; 

break; 

case '-': return 1; 

break; 

case '*': return 1; 

break; 

case '/': return 1; 

break; 

case '^':return 1; 

break; 

case '(': return 1; 

break; 

case ')':return 1; 
 
break; 

default:return 0; 

} 

} 

void convertip(char infix[],char postfix[]) 

{ 

int i,symbol,j=0; 



for(i=0;i<strlen(infix);i++) 

{ 

symbol=infix[i]; 

if(isoperator(symbol)==0) 

{ 

postfix[j]=symbol; 

j++; 

} 

else{ 

if(symbol=='(')push(symbol); 

else if(symbol==')') 

{ 

while(stack[top]!='(') 

{ 

postfix[j]=pop(); 

j++; 

} 

pop(); 
 
} 

else{ 

if(prcd(symbol)>prcd(stack[top])) 

push(symbol); 

else{ 

while(prcd(symbol)<=prcd(stack[top])) 

{ 

postfix[j]=pop(); 

j++; 

} 

push(symbol); 

} 

} 

} 

} 

while(top!=-1) 

{ 

postfix[j]=pop(); 

j++; 

} 

postfix[j]='\0'; 

} 

void main() 

{ 

char infix[20],postfix[20]; 


printf("Enter the valid infix string:\n"); 

scanf("%s",&infix[0]); 

convertip(infix,postfix); 

printf("The corresponding postfix string is:\n"); 

printf("%s",postfix); 

 

} 
		
			OUTPUT:

 		Enter the valid infix string: 
		a+b*c-d/e 
		The corresponding postfix string is: 
		abc*+de/-



































10.   PROGRAM TO DO BASIC OPERATION ON QUEUE 

#include<stdio.h> 

int queue[10],front=0,rear=0; 
int max=10; 
void enqueue(); 
void dequeue(); 
void display(); 
void main() 
{ 
int ch,z; 

do 
{ 
   printf("\n1.ENQUEUE \n2.DEQUEUE \n3.DISPLAY "); 
    printf("\nEnter your Choice:"); 
    scanf("%d",&ch); 

    switch(ch) 
    { 
    case 1: enqueue(); 
    break; 
    case 2: dequeue(); 
    break; 
    case 3: display(); 
    break; 
    
    default:printf("\n ERROR!!"); 
    } 
printf("\n Want to continue 1 for yes 0 for no\n"); 
scanf("%d",&z); 
}while(z==1); 
} 
 
 
void enqueue() 
{ 
    int element; 
    if(rear==max) 
    { 
        printf("\nOverflow!!"); 
    } 
    else 
    { 
        printf("\nEnter Element:"); 
        scanf("%d",&element); 
        queue[rear++]=element; 
        printf("\n  Enqueued \n"); 
    } 
 
} 
 
void dequeue() 
{ 
    if(rear==front) 
    { 
        printf("\nUnderflow!!"); 
    } 
    else 
    { 
        front++; 
        printf("\n Dequeued \n"); 
    } 
} 
void display() 
{ 
    int i; 
    if(front==rear) 
    { 
        printf("\nQueue is Empty!!!"); 
    } 
    else 
    { 
        printf(" \n"); 
        for(i=front;i<rear;i++) 
        { 
            printf("  %d ",queue[i]); 
        } 
            
    } 
}			
				OUTPUT:
 		 
1.ENQUEUE 
2.DEQUEUE 
3.DISPLAY 
Enter your Choice:1 

Enter Element:1 

  Enqueued 

 Want to continue 1 for yes 0 for no 
1 

1.ENQUEUE 
2.DEQUEUE 
3.DISPLAY 
Enter your Choice:1 

Enter Element:2 

  Enqueued 

 Want to continue 1 for yes 0 for no 
1 

1.ENQUEUE 
2.DEQUEUE 
3.DISPLAY 
Enter your Choice:1 

Enter Element:3 

  Enqueued 

 Want to continue 1 for yes 0 for no 
1 
1.ENQUEUE 
2.DEQUEUE 
3.DISPLAY 
Enter your Choice:1 

Enter Element:4 
 Enqueued 

 Want to continue 1 for yes 0 for no 
1 

1.ENQUEUE 
2.DEQUEUE 
3.DISPLAY 
Enter your Choice:2 
Dequeued 

Want to continue 1 for yes 0 for no 
1 
1.ENQUEUE 
2.DEQUEUE 
3.DISPLAY 
Enter your Choice:3 
 
  2   3   4 









11.               BINARY SEARCH PROGRAM

#include <stdio.h> 
//#include<stdlib.h> 
void binarysearch(int,int,int); 
int arr[10]; 
int main(int argc ,char *argv[]) 
{ 
   int i=0,search; 
    //printf("Enter the elements:"); 
    for(i=0;i<argc;i++) 
    { 
        arr[i]=atoi(argv[i]); 
    } 
    printf("\nEnter the element you want to search:"); 
    scanf("%d",&search); 
    
    binarysearch(1,argc,search); 
    return 0; 
    } 

void binarysearch(int low,int high,int item) 
{ 
    
    if(low>high) 
    { 
        printf("\nElement not found\n"); 
        exit(0); 
    } 
    
    else 
    { 
        int mid=(low+high)/2; 
        
        if(arr[mid]==item) 
        { 
            printf("Element Found at position %d\n",mid); 
            exit(0); 
        } 
        
        else if(item < arr[mid]) 
            binarysearch(low,mid-1,item); 
        
        else 
            binarysearch(mid+1,high,item); 
    
} 
} 
        			OUTPUT:
./a.out 1 2 3 4 5 6 7 8 9 0 
Enter the element you want to search:3 
Element Found at position 3 
12.                               BUBBLE SORTING

#include<stdio.h> 
void main(int argc ,char *argv[]) 
{ 
    int arr[20]; 
    int i=0,j=0; 
    
   
    for(i=1;i<argc;i++) 
    { 
        arr[i]=atoi(argv[i]); 
        
    } 
    
    
    
    for(i=1;i<argc;i++) 
    { 
        
        for(j=1;j<(argc-(i));j++) 
        { 
            
            if(arr[j]>arr[j+1]) 
            { 
                
                int temp=arr[j]; 
                arr[j]=arr[j+1]; 
                arr[j+1]=temp; 
            } 
        } 
    } 
    
    printf("The sorted array is:"); 
    
    for(i=1;i<argc;i++) 
    { 
        
        printf("%d ",arr[i]); 
    } 
    
}

                       OUTPUT:
 

                  ./a.out 9 2 1 5 6 3 4 8 7 0 
The sorted array is:0 1 2 3 4 5 6 7 8 9 





13.                                  INSERTION SORT

#include<stdio.h> 
int main(int argc,char *argv[]) 
{ 

int a[20],i=1,j,key; 
 for(i=1;i<argc;i++) 
    { 
        a[i]=atoi(argv[i]); 
        
    } 



for(i=2;i<argc;i++) 
{ 

key=a[i]; 
j=i-1; 

while(j>=0 && key< a[j]) 
{ 

a[j+1]=a[j]; 
j--; 
} 

a[j+1]=key; 

} 
 printf("The sorted array is:"); 
for(i=1;i<argc;i++) 
{ 
printf("%d ",a[i]); 
} 

return 0; 
} 
  


 			 OUTPUT:
 

              	    ./a.out 9 2 1 5 6 3 4 8 7 0 
		 The sorted array is:0 1 2 3 4 5 6 7 8 9 




14.			SELECTION SORT


#include<stdio.h> 
void main(int argc, char *argv[]) 
{ 
    int arr[20]; 
    
     int i,j; 
    
    for(i=1;i<argc;i++) 
    { 
        arr[i]=atoi(argv[i]); 
        
    } 

    
    
   
    
    for(i=1;i<argc;i++) 
    { 
        
        for(j=i+1;j<argc;j++) 
        { 
            if(arr[i]>arr[j]) 
            { 
                int temp=arr[i]; 
                arr[i]=arr[j]; 
                arr[j]=temp; 
                
            } 
            
        } 
    } 
    printf("The sorted array is:"); 
    for(i=1;i<argc;i++) 
    { 
        printf("%d ",arr[i]); 
    } 
    
}



			
 			 OUTPUT:
 

              	    ./a.out 9 2 1 5 6 3 4 8 7 0 
		 The sorted array is:0 1 2 3 4 5 6 7 8 9 

15.			QUICK SORT

#include<stdio.h> 
 int part(int *arr,int l,int n) 
{ 
int i=l+1,j=n+1; 
int temp; 
while(j>i) 
{ 
while(arr[i]<arr[l]&&i<=n) 
i++; 
while(arr[j]>arr[l]&&j>=l) 
j--; 
if(j>i) 
{ 
temp=arr[i]; 
arr[i]=arr[j]; 
arr[j]=temp; 
} 
} 
temp=arr[l]; 
arr[l]=arr[j]; 
arr[j]=temp; 
return j; 
} 
int quick(int *arr,int l,int n) 
{ int j; 
if(l<n) 
{ 
j=part(arr,l,n); 
quick(arr,l,j-1); 
quick(arr,j+1,n); 
return 0; 
} 
} 
void main(int argc, char *argv[]) 
{ 
int arr[20],i; 
 for(i=1;i<argc;i++) 
    { 
        arr[i]=atoi(argv[i]); 
         } 
printf("the sorted array is: \n"); 
quick(arr,1,argc-2); 
for(i=1;i<argc;i++) 
printf("%d ",arr[i]); 
}

			 OUTPUT:

  		 ./a.out 9 2 1 5 6 3 4 8 7 0 
		 The sorted array is:0 1 2 3 4 5 6 7 8 9 
16.         INORDER TRAVERSAL OF BINARY TREE

#include<stdio.h> 
#include<stdlib.h> 
struct node 
{ 

int item; 
struct node * left,*right; 
}; 
struct node* root; 

void maketree(int); 
void delete(int); 
void inorder(struct node*); 
int main() 
{ 
int num,delet; 
root=(struct node*)malloc(sizeof(struct node)); 
int choice; 


while(1) 
{ 
printf("Enter your choice\n1 for INSERTION\n2 for INORDER TRAVERSAL\n3 for Deletion\n4 to Exit\n"); 
scanf("%d",&choice); 

switch(choice) 
{ 

case 1: 
printf("Enter the value you want to insert\n"); 
scanf("%d",&num); 
maketree(num); 
break; 

case 2: 
printf("\nInorder:"); 
inorder(root); 
break; 

case 3: 

printf("Enter the value you want to delete"); 
scanf("%d",&delet); 
delete(delet); 
break; 


case 4: 
exit(0); 
 

} 
} 
return 0; 
} 

void maketree(int x) 
{ 

struct node* p,*previous,*current; 

p=(struct node*)malloc(sizeof(struct node)); 

if(p==NULL) 
printf("Out of Memory"); 
p->item=x; 
p->left=NULL; 
p->right=NULL; 

if(root==NULL) 
{ 
root=p; 
return; 
} 

previous = NULL; 
current=root; 

while(current!=NULL) 
{ 
previous=current; 
if(p->item < current->item) 
current=current->left; 
else 
current=current->right; 
} 

if(p->item < previous->item) 
previous->left=p; 
else 
previous ->right=p; 

} 

void inorder(struct node* t) 
{ 

if(t!=NULL) 
{ 
inorder(t->left); 
printf("%d\n",t->item); 
inorder(t->right); 

} 
} 

void delete(int num) 
{ 

struct node *parent,*del,*temp; 

parent=root; 
del=root; 
while(del!=NULL && del->item !=num) 
{ 
parent=del; 

if(num < del->item) 
del=del->left; 
else 
del=del->right; 

} 

if(del==NULL) 
printf("Data Not Found"); 

else if(del->left!=NULL && del->right!=NULL) 
{ 
temp=del->right; 
while(temp->left!=NULL) 
{ 
parent=temp; 
temp=temp->left; 
} 
del->item=temp->item; 
del=temp; 
free(del); 
} 
} 


		OUTPUT :
Enter your choice 
1 for INSERTION 
2 for INORDER TRAVERSAL 
3 for Deletion 
4 to Exit 
1 
Enter the value you want to insert 
5 
Enter your choice 
1 for INSERTION 
2 for INORDER TRAVERSAL 
3 for Deletion 
4 to Exit 
1 
Enter the value you want to insert 
3 
Enter your choice 
1 for INSERTION 
2 for INORDER TRAVERSAL 
3 for Deletion 
4 to Exit 
1 
Enter the value you want to insert 
7 
Enter your choice 
1 for INSERTION 
2 for INORDER TRAVERSAL 
3 for Deletion 
4 to Exit 
1 
Enter the value you want to insert 
2 
Enter your choice 
1 for INSERTION 
2 for INORDER TRAVERSAL 
3 for Deletion 
4 to Exit 
1 
Enter the value you want to insert 
6 
Enter your choice 
1 for INSERTION 
2 for INORDER TRAVERSAL 
3 for Deletion 
4 to Exit 
1 
Enter the value you want to insert 
8 
Enter your choice 
1 for INSERTION 
2 for INORDER TRAVERSAL 
3 for Deletion 
4 to Exit 
1 
Enter the value you want to insert 
9 
Enter your choice 
1 for INSERTION 
2 for INORDER TRAVERSAL 
3 for Deletion 
4 to Exit 
2 
 
Inorder:
2 
3 
5 
6 
7 
8 
9 












































17.    POSTORDER TRAVERSAL OF BINARY TREE

#include<stdio.h> 
#include<stdlib.h> 
struct node 
{ 

int item; 
struct node * left,*right; 
}; 
struct node* root; 

void maketree(int); 
void delete(int); 
void postorder(struct node*); 
int main() 
{ 
int num,delet; 
root=(struct node*)malloc(sizeof(struct node)); 
int choice; 


while(1) 
{ 
printf("Enter your choice\n1 for INSERTION\n2 for postorder TRAVERSAL\n3 for Deletion\n4 to Exit\n"); 
scanf("%d",&choice); 

switch(choice) 
{ 

case 1: 
printf("Enter the value you want to insert\n"); 
scanf("%d",&num); 
maketree(num); 
break; 

case 2: 
printf("\npostorder:"); 
postorder(root); 
break; 

case 3: 

printf("Enter the value you want to delete"); 
scanf("%d",&delet); 
delete(delet); 
break; 


case 4: 
exit(0); 


} 
} 
return 0; 
} 

void maketree(int x) 
{ 

struct node* p,*previous,*current; 

p=(struct node*)malloc(sizeof(struct node)); 

if(p==NULL) 
printf("Out of Memory"); 
p->item=x; 
p->left=NULL; 
p->right=NULL; 

if(root==NULL) 
{ 
root=p; 
return; 
} 

previous = NULL; 
current=root; 

while(current!=NULL) 
{ 
previous=current; 
if(p->item < current->item) 
current=current->left; 
else 
current=current->right; 
} 

if(p->item < previous->item) 
previous->left=p; 
else 
previous ->right=p; 

} 

void postorder(struct node* t) 
{ 

if(t!=NULL) 
{ 

postorder(t->left); 
postorder(t->right); 
printf("%d\n",t->item); 
} 
} 

void delete(int num) 
{ 

struct node *parent,*del,*temp; 

parent=root; 
del=root; 
while(del!=NULL && del->item !=num) 
{ 
parent=del; 

if(num < del->item) 
del=del->left; 
else 
del=del->right; 

} 

if(del==NULL) 
printf("Data Not Found"); 

else if(del->left!=NULL && del->right!=NULL) 
{ 

temp=del->right; 

while(temp->left!=NULL) 
{ 
parent=temp; 
temp=temp->left; 
} 
del->item=temp->item; 
del=temp; 
free(del); 
} 
} 

		OUTPUT: 

Enter your choice 
1 for INSERTION 
2 for postorder TRAVERSAL 
3 for Deletion 
4 to Exit 
1 
Enter the value you want to insert 
5
Enter your choice 
1 for INSERTION 
2 for postorder TRAVERSAL 
3 for Deletion 
4 to Exit 
1 
Enter the value you want to insert 
3
Enter your choice 
1 for INSERTION 
2 for postorder TRAVERSAL 
3 for Deletion 
4 to Exit 
1 
Enter the value you want to insert 
2
Enter your choice 
1 for INSERTION 
2 for postorder TRAVERSAL 
3 for Deletion 
4 to Exit 
1 
Enter the value you want to insert 
7
Enter your choice 
1 for INSERTION 
2 for postorder TRAVERSAL 
3 for Deletion 
4 to Exit 
1 
Enter the value you want to insert 
6
Enter your choice 
1 for INSERTION 
2 for postorder TRAVERSAL 
3 for Deletion 
4 to Exit 
1 
Enter the value you want to insert 
8
Enter your choice 
1 for INSERTION 
2 for postorder TRAVERSAL 
3 for Deletion 
4 to Exit 
1 
Enter the value you want to insert 
9

Enter your choice 
1 for INSERTION 
2 for postorder TRAVERSAL 
3 for Deletion 
4 to Exit 
2 
postorder:
2 
3 
6 
9 
8 
7 
5 









































 18 . PREORDER TRAVERSAL OF BINARY TREE

#include<stdio.h> 
#include<stdlib.h> 
struct node 
{ 

int item; 
struct node * left,*right; 
}; 
struct node* root; 

void maketree(int); 
void delete(int); 
void preorder(struct node*); 
int main() 
{ 
int num,delet; 
root=(struct node*)malloc(sizeof(struct node)); 
int choice; 


while(1) 
{ 
printf("Enter your choice\n1 for INSERTION\n2 for preorder TRAVERSAL\n3 for Deletion\n4 to Exit\n"); 
scanf("%d",&choice); 

switch(choice) 
{ 

case 1: 
printf("Enter the value you want to insert\n"); 
scanf("%d",&num); 
maketree(num); 
break; 

case 2: 
printf("\npreorder:"); 
preorder(root); 
break; 

case 3: 

printf("Enter the value you want to delete"); 
scanf("%d",&delet); 
delete(delet); 
break; 


case 4: 
exit(0); 


} 
} 
return 0; 
} 

void maketree(int x) 
{ 

struct node* p,*previous,*current; 

p=(struct node*)malloc(sizeof(struct node)); 

if(p==NULL) 
printf("Out of Memory"); 
p->item=x; 
p->left=NULL; 
p->right=NULL; 

if(root==NULL) 
{ 
root=p; 
return; 
} 

previous = NULL; 
current=root; 

while(current!=NULL) 
{ 
previous=current; 
if(p->item < current->item) 
current=current->left; 
else 
current=current->right; 
} 

if(p->item < previous->item) 
previous->left=p; 
else 
previous ->right=p; 

} 

void preorder(struct node* t) 
{ 

if(t!=NULL) 
{ 
printf("%d\n",t->item); 
preorder(t->left); 
preorder(t->right); 

} 
} 

void delete(int num) 
{ 

struct node *parent,*del,*temp; 

parent=root; 
del=root; 
while(del!=NULL && del->item !=num) 
{ 
parent=del; 

if(num < del->item) 
del=del->left; 
else 
del=del->right; 

} 

if(del==NULL) 
printf("Data Not Found"); 

else if(del->left!=NULL && del->right!=NULL) 
{ 

temp=del->right; 

while(temp->left!=NULL) 
{ 
parent=temp; 
temp=temp->left; 
} 

del->item=temp->item; 
del=temp; 
free(del); 
} 

} 


OUTPUT:

Enter your choice 
1 for INSERTION 
2 for preorder TRAVERSAL 
3 for Deletion 
4 to Exit 
1 
Enter the value you want to insert 
5 
Enter your choice 
1 for INSERTION 
2 for preorder TRAVERSAL 
3 for Deletion 
4 to Exit 
1 
Enter the value you want to insert 
3 
Enter your choice 
1 for INSERTION 
2 for preorder TRAVERSAL 
3 for Deletion 
4 to Exit 
1 
Enter the value you want to insert 
2 
Enter your choice 
1 for INSERTION 
2 for preorder TRAVERSAL 
3 for Deletion 
4 to Exit 
1 
Enter the value you want to insert 
7 
Enter your choice 
1 for INSERTION 
2 for preorder TRAVERSAL 
3 for Deletion 
4 to Exit 
1 
Enter the value you want to insert 
6 
Enter your choice 
1 for INSERTION 
2 for preorder TRAVERSAL 
3 for Deletion 
4 to Exit 
1 
Enter the value you want to insert 
8 
Enter your choice 
1 for INSERTION 
2 for preorder TRAVERSAL 
3 for Deletion 
4 to Exit 
1 
Enter the value you want to insert 
9 
Enter your choice 
1 for INSERTION 
2 for preorder TRAVERSAL 
3 for Deletion 
4 to Exit 
2 

preorder:
5 
3 
2 
7 
6 
8 
9 






































19.           TOWER OF HANOI

#include <stdio.h> 
 
void hanoi(int, char, char, char); 
 
int main() 
{ 
    int num; 
 
    printf("Enter the number of disks : "); 
    scanf("%d", &num); 
    printf("The sequence of moves involved in the Tower of Hanoi are :\n"); 
    hanoi(num, 'A', 'C', 'B'); 
    return 0; 
} 
void hanoi(int num, char frompeg, char topeg, char auxpeg) 
{ 
    if (num == 1) 
    { 
        printf("\n Move disk 1 from peg %c to peg %c", frompeg, topeg); 
        return; 
    } 
    hanoi(num - 1, frompeg, auxpeg, topeg); 
    printf("\n Move disk %d from peg %c to peg %c", num, frompeg, topeg); 
    hanoi(num - 1, auxpeg, topeg, frompeg); 
}

		OUTPUT:
Enter the number of disks : 3 
The sequence of moves involved in the Tower of Hanoi are : 

 Move disk 1 from peg A to peg C 
 Move disk 2 from peg A to peg B 
 Move disk 1 from peg C to peg B 
 Move disk 3 from peg A to peg C 
 Move disk 1 from peg B to peg A 
 Move disk 2 from peg B to peg C 
 Move disk 1 from peg A to peg C



